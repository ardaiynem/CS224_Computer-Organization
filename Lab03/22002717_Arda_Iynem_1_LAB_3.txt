CS224
Lab No.: 3
Section No.: 1
Your Full Name: Arda Ä°ynem
Bilkent ID: 22002717
Date: 02/11/2022

##############################
# recusiveDivision.asm start #
##############################

#--------------------------------------------------- Text Segment ---------------------------------------------------
.text
main:
	la $a0, msgDividend # Dividend Input
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	move $t0, $v0
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	beqz $t0 , terminate
	
	la $a0, msgDivisor # Divisor Input
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	move $t1, $v0
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	beqz $t1 , terminate
	
	add $v0, $zero, $zero
	move	$a0, $t0
	move	$a1, $t1
	jal	recursiveDivision
	move $t2, $v0

	la $a0, msgQuotient # Print result.
	li $v0, 4
	syscall
	
	move	$a0, $t2 # Print result.
	li	$v0, 1
	syscall
	
	la $a0, newLine
	li $v0, 4
	syscall
	syscall
	
	j main
	
terminate:
# Stop	
	li	$v0, 10
	syscall
#--------------------------------------------------- Subprogram Segment ---------------------------------------------------

#====================================================== START recusiveDivision
recursiveDivision:
addi	$sp, $sp, -8
#sw	$a0, 4($sp)
sw	$ra, 0($sp)

bge $a0, $a1, recurse # BASE CASE
lw $ra, 0($sp) # Restore the return adress
addi $sp, $sp, 8 # Restore the stack pointer
jr $ra
recurse:
sub $a0, $a0, $a1 # Subtract divisor from the divident
jal recursiveDivision

lw	$ra, 0($sp) # Restore the return adress
addi	$sp, $sp, 8 # Restore the stack pointer

addi	$v0, $v0, 1 	# Add succesfull subtractions to obtain quotinent
jr	$ra

#====================================================== END recusiveDivision

#--------------------------------------------------- Data Segment ---------------------------------------------------
.data
msgDividend: .asciiz "Input an positive integer dividend (0 to terminate): " 
msgDivisor: .asciiz "Input an positive integer divisor (0 to terminate): " 
msgQuotient: .asciiz "The quotient is: " 
newLine: .asciiz "\n"

############################
# recusiveDivision.asm end #
############################





#########################
# reverseList.asm start #
#########################

#--------------------------------------------------- Text Segment ---------------------------------------------------
.text
main:
menu: # Menu
	la $a0, menuA
	li $v0, 4
	syscall
	la $a0, menuB
	li $v0, 4
	syscall
	la $a0, menuC
	li $v0, 4
	syscall
	la $a0, menuD
	li $v0, 4
	syscall
	la $a0, msgMenu
	li $v0, 4
	syscall
	li $v0, 12
	syscall
	la $t5, ($v0)
	la $a0, newLine
	li $v0, 4
	syscall
	
	beq $t5, 97, A
	beq $t5, 98, B
	beq $t5, 99, C
	beq $t5, 100, terminate
	j menu
	
A:
	la $a0, newLine
	li $v0, 4
	syscall

	move	$a0, $t0	# Print original list
	jal 	printLinkedList
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	j menu
B:
	la $a0, newLine
	li $v0, 4
	syscall
	
	move $a0, $t1
	jal populateLinkedList # Add a node to original list
	bnez $t1, saveFirstNode # If it is first node, then don't store this node's adress to previous since there isn't one
	move $t0, $v0
	saveFirstNode:
	move $t1, $v0 # Save  first node's adress once
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	j menu
	
C:
	la $a0, newLine
	li $v0, 4
	syscall
	
	move	$a0, $t0	# Print reverse list recursively 
	jal 	printReverse
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	j menu

terminate:
	li $v0, 10
	syscall
	
#--------------------------------------------------- Subprogram Segment ---------------------------------------------------

#====================================================== START printReverse
printReverse:
	addi	$sp, $sp, -12 # Store to stack
	sw	$s0, 8($sp)
	sw	$a0, 4($sp)
	sw	$ra, 0($sp) 
	
	bnez $a0, recurse # BASE CASE
	addi $sp, $sp, 12 # Restore stack pointer
	jr $ra
	
recurse:
	lw $a0, ($a0) # Iterate node for recursion
	move $s0, $a0
	jal printReverse # Recurse

	lw	$s0, 8($sp) # Restore $s0
	lw	$a0, 4($sp) # Restore $a0
	lw	$ra, 0($sp) # Restore $ra
	addi	$sp, $sp, 12 # Restore stack pointer
	
	lw	$a0, 4($a0) # Print the element
	li	$v0, 1		
	syscall	
	
	la $a0, inSpace
	li $v0, 4
	syscall
	
	move $a0, $s0
	jr $ra

#====================================================== END printReverse

#====================================================== START populateLinkedList
populateLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By 4*i inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -16
	sw	$s2, 12($sp)
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0 # last node's adress
	
	li	$a0, 8
	li	$v0, 9
	syscall

	move	$s1, $v0 # new node's adress
	
	la $a0, msgInput
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	sw $v0, 4($s1)	# Store the data value.
	
	move $v0, $s1
	
	beqz $s0, firstNode
	sw $s1, ($s0)
firstNode:
	lw	$s2, 12($sp)
	lw	$s1, 8($sp)
	lw	$s0, 4($sp)
	lw	$ra, 0($sp) 
	addi	$sp, $sp, 16
	jr	$ra
#====================================================== END populateLinkedList

#====================================================== START printLinkedList
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.

	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	
	
	la $a0, inSpace
	li $v0, 4
	syscall

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	bnez $s3, notNull
	
	la $a0, msgEmpty
	li $v0, 4
	syscall
	
notNull:
	la $a0, msgNodeNum
	li $v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#====================================================== END printLinkedList
	
#--------------------------------------------------- Data Segment ---------------------------------------------------
	.data
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "
	
msgSize: .asciiz "Input the size of dynamic array: " 
msgInput: .asciiz "Input an integer: " 
msgEmpty: .asciiz "NULL ARRAY!\n" 
msgMerged: .asciiz "\nMerged List:\n" 
msgArray: .asciiz "Array: " 
msgNodeNum: .asciiz "\nNumber of nodes is: " 
newLine: .asciiz "\n"
inSpace: .asciiz ", "
msgMenu: .asciiz "Input menu choice: "
menuA: .asciiz "a. Display the list.\n"
menuB: .asciiz "b. Populate the list.\n"
menuC: .asciiz "c. Print reversed list.\n"
menuD: .asciiz "d. Quit.\n"

#######################
# reverseList.asm end #
#######################
