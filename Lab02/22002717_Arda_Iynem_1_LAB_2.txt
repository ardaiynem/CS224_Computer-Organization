CS224
Lab No.: 2
Section No.: 1
Your Full Name: Arda Ä°ynem
Bilkent ID: 22002717
Date: 12/10/2022

###########################
# bubbleSortLab.asm start #
###########################

#--------------------------------------------------- Text Segment ---------------------------------------------------
	.text
input:
	la $a0, menuA
	li $v0, 4
	syscall
	la $a0, menuB
	li $v0, 4
	syscall
	la $a0, msgMenu
	li $v0, 4
	syscall
	li $v0, 12
	syscall
	la $t5, ($v0)
	la $a0, newLine
	li $v0, 4
	syscall
	
	beq $t5, 97, A
	beq $t5, 98, terminate
	j input
	
A:
	la $a0, msgSize
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	la $t0, ($v0) # t0 = size of dynamic array
	
		
	blt $t0, 1, error
	
	mul $t1, $t0, 4 # t1 = bytes of array
	la $a0, ($t1)
	li $v0,9
	syscall
	la $t1, ($v0) # t1 = array adress
	
	la $t3, ($t1)
	la $a0, ($t1) # array adress
	la $a1, ($t0) # array size
	jal monitor
	
	jal display
	
	la $a0, ($t1) # array adress
	la $a1, ($t0) # array size
	jal minMax
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	j input
	
terminate:
	li $v0, 10
	syscall
	
#--------------------------------------------------- Subprogram Segment ---------------------------------------------------
monitor:
	addi $sp, $sp, -24 # stack store
	sw $ra, 20($sp)
	sw $s0, 16($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $s3, 0($sp)
	
	move $s0, $a0 # array adress
	move $s1, $a1 # size of array
	li $s3, 0
monitorLoop:
	la $s4, ($a0)
	la $a0, msgInput # prompt: enter element
	li $v0, 4
	syscall
	la $a0, ($s4)
	
	li $v0, 5 # get element
	syscall
	
	sw $v0, ($s0) # add element to the array
	addi $s0, $s0, 4
	addi $s3, $s3, 1
	blt $s3, $s1, monitorLoop
	
	#la $a0, ($a0)
	#la $a1, ($a1)
	jal bubbleSort
	
	lw $ra, 20($sp)
	lw $s0, 16($sp)
	lw $s1, 8($sp)
	lw $s2, 4($sp)
	lw $s3, 0($sp)
	addi $sp, $sp, 24 # stack recover
	jr $ra
	
bubbleSort:
	addi $sp, $sp, -24 # stack store
	sw $ra, 20($sp)
	sw $s0, 16($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $s3, 0($sp)
	
	move $s0, $a0
	move $s1, $a1
	
	beq $s1, 1, bubbleSortDone
	li $s2, 1
	la $s3, ($s0)
	li $s4, 0
bubbleSortLoop:
	addi $s5, $s3, 4
	lw $s6, ($s3) # get elements to the registers from array
	lw $s7, ($s5)
	bge $s6, $s7, bubbleSortContinue # swap elements if needed
	la $t4, ($s6)
	sw $s7, ($s3)
	sw $t4, ($s5)
	addi $s4, $s4, 1
bubbleSortContinue:
	addi $s3, $s3, 4 # iterate pointer
	addi $s2, $s2, 1 # iterate count
	blt $s2, $s1, bubbleSortLoop
	beqz $s4, bubbleSortDone # If no swaps has done, then sort is done
	j bubbleSort
bubbleSortDone:
	lw $ra, 20($sp) # stack recover
	lw $s0, 16($sp)
	lw $s1, 8($sp)
	lw $s2, 4($sp)
	lw $s3, 0($sp)
	addi $sp, $sp, 24
	jr $ra
	
minMax:
	addi $sp, $sp, -24 # stack store
	sw $ra, 20($sp)
	sw $s0, 16($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $s3, 0($sp)
	
	la $s0, ($a0) # Array starting address
	la $s1, ($a1) # Array size
	
	la $a0, msgMax # Prompt mininmum element message
	li $v0, 4
	syscall
	
	lw $s3, ($s0) # Promt the first element
	la $a0, ($s3)
	li $v0, 1
	syscall
	
	la $a0, newLine
	li $v0, 4
	syscall
	
	la $a0, msgMin # Prompt maximum element message
	li $v0, 4
	syscall
	
	subi $s1, $s1, 1 # Find the memory adress of last element
	mul $s1, $s1, 4
	add $s0, $s0, $s1
	
	lw $s3, ($s0) # Promt the last element
	la $a0, ($s3)
	li $v0, 1
	syscall
	
	lw $ra, 20($sp) # stack recover
	lw $s0, 16($sp)
	lw $s1, 8($sp)
	lw $s2, 4($sp)
	lw $s3, 0($sp)
	addi $sp, $sp, 24
	
	jr $ra
	
display:
	addi $sp, $sp, -24 # stack store
	sw $ra, 20($sp)
	sw $s0, 16($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $s3, 0($sp)
	
	move $s0, $a0
	move $s1, $a1
	li $s3, 0
	
	la $a0, msgInvert
	li $v0, 4
	syscall
	
displayLoop:
	bge $s3, $s1, displayDone
	lw $s2, ($s0)
	move $a0, $s2
	li $v0, 1
	syscall
	
	la $a0, inSpace
	li $v0, 4
	syscall
	
	addi $s0, $s0, 4
	addi $s3, $s3, 1
	j displayLoop
displayDone:
	jr $ra
	
	lw $ra, 20($sp) # stack recover
	lw $s0, 16($sp)
	lw $s1, 8($sp)
	lw $s2, 4($sp)
	lw $s3, 0($sp)
	addi $sp, $sp, 24
		
error:
	la $a0, msgError # array size must be greater than 0 error
	li $v0, 4
	syscall
	
	j input


		
#--------------------------------------------------- Data Segment ---------------------------------------------------
	.data
msgSize: .asciiz "Input the size of dynamic array: " 
msgInput: .asciiz "Input a valid hexademical number (invalid number to terminate): " 
msgResult: .asciiz "\nResult is: "
msgMenu: .asciiz "Input menu choice: "
msgError: .asciiz "\nArray size must be greater than 0 !\n"
msgInvert: .asciiz "\nThe sorted array: "
msgMin: .asciiz "\nMinimum element: "
msgMax: .asciiz "\nMaximum element: "
newLine: .asciiz "\n"
inSpace: .asciiz ", "
menuA: .asciiz "a. Sort the input array in descending order.\n"
menuB: .asciiz "b. Quit.\n"

#########################
# bubbleSortLab.asm end #
#########################
