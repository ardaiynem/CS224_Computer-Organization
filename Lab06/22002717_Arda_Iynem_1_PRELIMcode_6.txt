CS224
Lab No.: 6
Section No.: 1
Your Full Name: Arda Ä°ynem
Bilkent ID: 22002717
Date: 13/12/2022


#--------------------------------------------------- Text Segment ---------------------------------------------------
	.text

	jal sizeInput
	add $s0, $v0, $zero
	add $s2, $v1, $zero
	
menu:
	la $a0, menuA
	li $v0, 4
	syscall
	la $a0, menuB
	li $v0, 4
	syscall
	la $a0, menuC
	li $v0, 4
	syscall
	la $a0, menuD
	li $v0, 4
	syscall
	la $a0, menuE
	li $v0, 4
	syscall
	la $a0, msgMenu
	li $v0, 4
	syscall
	li $v0, 12
	syscall
	la $t0, ($v0)
	la $a0, newLine
	li $v0, 4
	syscall
	
	beq $t0, 97, A
	beq $t0, 98, B
	beq $t0, 99, C
	beq $t0, 100, D
	beq $t0, 101, terminate
	
	j menu

A:
	add $a0, $s0, $zero # matrix size (N)
	add $a1, $s2, $zero # matrix start address
	jal displayElement
	j menu
	
B:
	add $a0, $s0, $zero # matrix size (N)
	add $a1, $s2, $zero # matrix start address
	jal rowSum
	j menu
C:
	add $a0, $s0, $zero # matrix size (N)
	add $a1, $s2, $zero # matrix start address
	jal colSum
	j menu
	
D:
	jal sizeInput
	add $s0, $v0, $zero
	add $s2, $v1, $zero
	j menu
terminate:
	li $v0, 10
	syscall
	
#--------------------------------------------------- Subprogram Segment ---------------------------------------------------
sizeInput:
	addi	$sp, $sp, -20
	sw	$s0, 0($sp)
	sw	$s1, 4($sp)
	sw	$s2, 8($sp)
	sw	$s3, 12($sp)
	sw	$s4, 16($sp)
	
	la $a0, msgSize
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	add $s0, $v0, $zero # s0 = Square size
	
	mul $s1, $s0, $s0 # s1 = (square size)^2 (max number in matrix)
	mul $s2, $s1, 2 # s2 = (square size)^2*2 (byte number for allocation of half-words)
	
	add $a0, $s2, $zero
	li $v0, 9
	syscall # Dynamic memory allocation with s1 bytes
	add $s2, $v0, $zero # s2 = array adress
	add $s3, $s2, $zero #s3 = temp array address
	addi $s4, $zero, 0 # s4 = loop counter
fillArraySTART:
	beq, $s4, $s1, fillArrayDONE
	addi $s4, $s4, 1
	sh $s4, ($s3)
	addi $s3, $s3, 2
	j fillArraySTART
fillArrayDONE:

	add $v0, $s0, $zero
	add $v1, $s2, $zero

	lw	$s0, 0($sp)
	lw	$s1, 4($sp)
	lw	$s2, 8($sp)
	lw	$s3, 12($sp)
	lw	$s4, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra

displayElement:
	addi	$sp, $sp, -20
	sw	$s0, 0($sp)
	sw	$s1, 4($sp)
	sw	$s2, 8($sp)
	sw	$s3, 12($sp)
	sw	$s4, 16($sp)
	
	add $s2, $a0, $zero # s2 = matrix size (N)
	add $s4, $a1, $zero # s4 = matrix address
	
	la $a0, msgRowMenuA
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	add $s0, $v0, $zero # s0 = Row number
	
	la $a0, msgColMenuA
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	add $s1, $v0, $zero # s1 = Col number
	
	addi $s0, $s0, -1
	mul $s0, $s0, $s2
	mul $s0, $s0, 2
	
	addi $s1, $s1, -1
	mul $s1, $s1, 2
	
	add $s3, $s0, $s1
	add $s4, $s4, $s3
	lh $s4, ($s4)

	la $a0, msgOutMenuA
	li $v0, 4
	syscall
	add $a0, $s4, $zero
	li $v0, 1
	syscall
	la $a0, newLine
	li $v0, 4
	syscall
		
	lw	$s0, 0($sp)
	lw	$s1, 4($sp)
	lw	$s2, 8($sp)
	lw	$s3, 12($sp)
	lw	$s4, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
	
rowSum:
	addi	$sp, $sp, -24
	sw	$s0, 0($sp)
	sw	$s1, 4($sp)
	sw	$s2, 8($sp)
	sw	$s3, 12($sp)
	sw	$s4, 16($sp)
	sw	$s5, 20($sp)
	
	add $s0, $a0, $zero # s0 = matrix size (N)
	add $s1, $a1, $zero # s1 = matrix address
	
	add $s3, $zero, $zero
	add $s5, $zero, $zero
	rowSumOuterLoopSTART:
	beq, $s5, $s0, rowSumOuterLoopEND
	add $s2, $zero, $zero
	rowSumLoopSTART:
		beq, $s2, $s0, rowSumLoopEND
		lh $s4, ($s1)
		add $s3, $s3, $s4
		addi $s2, $s2, 1
		addi $s1, $s1, 2
		j rowSumLoopSTART
	rowSumLoopEND:
	addi $s5, $s5, 1
	j rowSumOuterLoopSTART
	rowSumOuterLoopEND:
	
	
	la $a0, msgOutMenuB
	li $v0, 4
	syscall
	add $a0, $s3, $zero
	li $v0, 1
	syscall
	la $a0, newLine
	li $v0, 4
	syscall
	
		
	lw	$s0, 0($sp)
	lw	$s1, 4($sp)
	lw	$s2, 8($sp)
	lw	$s3, 12($sp)
	lw	$s4, 16($sp)
	lw	$s5, 20($sp)
	addi	$sp, $sp, 24
	jr	$ra

colSum:
	addi	$sp, $sp, -20
	sw	$s0, 0($sp)
	sw	$s1, 4($sp)
	sw	$s2, 8($sp)
	sw	$s3, 12($sp)
	sw	$s4, 16($sp)
	
	add $s0, $a0, $zero # s0 = matrix size (N)
	add $s1, $a1, $zero # s1 = matrix address
	
	mul $s4, $s0, 2 # s4 = Increase amount
	add $s2, $s1, $zero # s2 = tmp array address
	
	add $s3, $zero, $zero
	add $t2, $zero, $zero
	colSumOuterLoopSTART:
	beq, $t2, $s0, colSumOuterLoopEND
	add $t0, $zero, $zero
	colSumLoopSTART:
		beq, $t0, $s0, colSumLoopEND
		lh $t1, ($s2)
		add $s3, $s3, $t1
		addi $t0, $t0, 1
		add $s2, $s2, $s4
		j colSumLoopSTART
	colSumLoopEND:
	addi $t2, $t2, 1
	mul $t3, $t2, 2
	add $s2, $s1, $t3 # s2 = tmp array address
	j colSumOuterLoopSTART
	colSumOuterLoopEND:
	
	la $a0, msgOutMenuC
	li $v0, 4
	syscall
	add $a0, $s3, $zero
	li $v0, 1
	syscall
	la $a0, newLine
	li $v0, 4
	syscall
	
		
	lw	$s0, 0($sp)
	lw	$s1, 4($sp)
	lw	$s2, 8($sp)
	lw	$s3, 12($sp)
	lw	$s4, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra

#--------------------------------------------------- Data Segment ---------------------------------------------------
	.data
msgSize: .asciiz "Input the size of square matrix: " 
msgMenu: .asciiz "Input menu choice: "
menuA: .asciiz "a. Display elements by specifying its row and column member.\n"
msgRowMenuA: .asciiz "Input a valid row number: "
msgColMenuA: .asciiz "Input a valid column number: "
msgOutMenuA: .asciiz "The number at specified row and column is: "
menuB: .asciiz "b. Summation of matrix elements row-major (row by row)\n"
msgRowMenuB: .asciiz "Input a valid row number to sum: "
msgOutMenuB: .asciiz "Summation of matrix elements row-major: "
menuC: .asciiz "c. Summation of matrix elements column-major (column by column).\n"
msgColMenuC: .asciiz "Input a valid column number to sum: "
msgOutMenuC: .asciiz "Summation of matrix elements column-major: "
menuD: .asciiz "d. New matrix input.\n"
menuE: .asciiz "e. Quit.\n"
newLine: .asciiz "\n"
spaceChar: .asciiz " "